CREATE TABLE UserEntity (
    id TEXT PRIMARY KEY NOT NULL,
    first_name TEXT NOT NULL,
    last_name TEXT NOT NULL,
    phone_number TEXT NOT NULL
);

CREATE TABLE CategoryEntity (
    id TEXT PRIMARY KEY NOT NULL,
    name TEXT NOT NULL
);

CREATE TABLE CatalogueEntity (
    id TEXT PRIMARY KEY NOT NULL,
    name TEXT NOT NULL,
    description TEXT NOT NULL,
    category_id TEXT NOT NULL,
    FOREIGN KEY (category_id) REFERENCES CategoryEntity(id)
);

CREATE TABLE ProductEntity(
    id TEXT PRIMARY KEY NOT NULL,
    name TEXT NOT NULL,
    price INTEGER AS Int NOT NULL,
    catalogue_id TEXT NOT NULL,
    FOREIGN KEY (catalogue_id) REFERENCES CatalogueEntity(id)
);

CREATE TABLE ProductVariantEntity(
    id TEXT PRIMARY KEY NOT NULL,
    name TEXT NOT NULL,
    abbreviation TEXT NOT NULL,
    product_id TEXT NOT NULL,
    FOREIGN KEY (product_id) REFERENCES ProductEntity(id)
);

CREATE TABLE ShoppingCartEntity(
    id TEXT PRIMARY KEY NOT NULL,
    margin INTEGER AS Int,
    cash_to_collect Integer AS Int
);

CREATE TABLE ShoppingCartItemEntity(
    id TEXT PRIMARY KEY NOT NULL,
    shopping_cart_id TEXT NOT NULL,
    product_variant_id TEXT NOT NULL,
    quantity INTEGER AS Int NOT NULL,
    FOREIGN KEY (shopping_cart_id) REFERENCES ShoppingCartEntity(id),
    FOREIGN KEY (product_variant_id) REFERENCES ProductVariantEntity(id)
);
CREATE UNIQUE INDEX idx_product_variant_id ON ShoppingCartItemEntity(product_variant_id);

CREATE TABLE CustomerEntity(
    id TEXT PRIMARY KEY NOT NULL,
    is_selected INTEGER AS Boolean NOT NULL DEFAULT 0,
    name TEXT NOT NULL,
    phone_number TEXT NOT NULL,
    address_line_1 TEXT NOT NULL,
    address_line_2 TEXT NOT NULL,
    city TEXT NOT NULL,
    zip_code TEXT
);

CREATE TABLE OrderEntity (
    id TEXT PRIMARY KEY NOT NULL,
    margin INTEGER AS Int NOT NULL,
    cash_to_collect Integer AS Int NOT NULL,
    product_charges Integer AS Int NOT NULL,
    delivery_charges Integer AS Int NOT NULL,
    order_total Integer AS Int NOT NULL,
    customer_id TEXT NOT NULL,
    status TEXT NOT NULL,
    date_placed TEXT NOT NULL,
    FOREIGN KEY (customer_id) REFERENCES CustomerEntity(id)
);

CREATE TABLE OrderItemEntity(
    id TEXT PRIMARY KEY NOT NULL,
    order_id TEXT NOT NULL,
    product_variant_id TEXT NOT NULL,
    quantity INTEGER AS Int NOT NULL,
    FOREIGN KEY (order_id) REFERENCES OrderEntity(id),
    FOREIGN KEY (product_variant_id) REFERENCES ProductVariantEntity(id)
);

-------------------- Category

insertCategory:
INSERT INTO CategoryEntity
(id, name)
VALUES (?, ?);


-------------------- Catalogue

selectCatalogue:
SELECT *
FROM CatalogueEntity
WHERE id = ?;

insertCatalogue:
INSERT INTO CatalogueEntity
(id, name, description, category_id)
VALUES (?, ?, ?, ?);

getCatalogues:
SELECT ctl.id, ctl.name, ctl.description, cat.name AS category,
prd.id AS product_id, prd.name AS product_name, prd.price AS product_price,
prdvar.id AS product_variant_id, prdvar.name AS product_variant_name, prdvar.abbreviation AS abbreviation
FROM CatalogueEntity ctl
INNER JOIN CategoryEntity cat ON cat.id = ctl.category_id
INNER JOIN ProductEntity prd ON prd.catalogue_id = ctl.id
INNER JOIN ProductVariantEntity prdvar ON prdvar.product_id = prd.id;


-------------------- Product
insertProduct:
INSERT INTO ProductEntity
(id, name, price, catalogue_id)
VALUES (?, ?, ?, ?);

selectProduct:
SELECT *
FROM ProductEntity prd
INNER JOIN ProductVariantEntity prdvar ON prdvar.product_id = prd.id;


-------------------- Product Variant
selectProductVariantsByProductId:
SELECT *
FROM ProductVariantEntity
WHERE product_id = ?;

insertProductVariant:
INSERT INTO ProductVariantEntity
(id, name, abbreviation, product_id)
VALUES (?, ?, ?, ?);


-------------------- Shopping Cart
selectShoppingCart:
SELECT sc.id, sc.margin, sc.cash_to_collect,
scit.id AS shopping_cart_item_id, scit.product_variant_id, scit.quantity,
prdvar.abbreviation AS size_abbreviation,
prd.id AS product_id, prd.name AS product_name, prd.price AS product_price
FROM ShoppingCartEntity sc
LEFT JOIN ShoppingCartItemEntity scit ON scit.shopping_cart_id = sc.id
LEFT JOIN ProductVariantEntity prdvar ON prdvar.id = scit.product_variant_id
LEFT JOIN ProductEntity prd ON prd.id = prdvar.product_id;

insertShoppingCart:
INSERT INTO ShoppingCartEntity
(id, margin, cash_to_collect)
VALUES (?, ? ,?);

updateShoppingCart:
UPDATE ShoppingCartEntity
SET
    margin = ?,
    cash_to_collect = ?
WHERE id = ?;

-------------------- Shopping Cart Item
selectAllShoppingCartItems:
SELECT *
FROM ShoppingCartItemEntity;

insertOrReplaceShoppingCartItem:
INSERT OR REPLACE INTO ShoppingCartItemEntity
(id, shopping_cart_id, product_variant_id, quantity)
VALUES (?, ?, ?, ?);

insertShoppingCartItem:
INSERT INTO ShoppingCartItemEntity
(id, shopping_cart_id, product_variant_id, quantity)
VALUES (?, ?, ?, ?);

updateShoppingCartItem:
UPDATE ShoppingCartItemEntity
SET
    product_variant_id = ?,
    quantity = ?
WHERE id = ?;

deleteShoppingCartItem:
DELETE FROM ShoppingCartItemEntity
WHERE id = ?;

deleteAllShoppingCartItems:
DELETE FROM ShoppingCartItemEntity;

-------------------- Customer
selectAllCustomers:
SELECT *
FROM CustomerEntity;

insertCustomer:
INSERT INTO CustomerEntity
(id, name, phone_number, address_line_1, address_line_2, city, zip_code)
VALUES (?, ?, ?, ?, ?, ?, ?);

updateCustomer:
UPDATE CustomerEntity
SET
    name = ?,
    phone_number = ?,
    address_line_1 = ?,
    address_line_2 = ?,
    city = ?,
    zip_code = ?
WHERE id = ?;

updateCustomerSelected:
UPDATE CustomerEntity
SET
    is_selected = ?
WHERE id = ?;

-------------------- Order
selectAllOrders:
SELECT o.id, o.status, o.date_placed, o.margin,
oi.product_variant_id,
c.name AS customer_name
FROM OrderEntity o
INNER JOIN OrderItemEntity oi ON oi.order_id = o.id
INNER JOIN CustomerEntity c ON c.id = o.customer_id;

selectOrdersByStatus:
SELECT o.id, o.status, o.date_placed, o.margin,
oi.product_variant_id,
c.name AS customer_name
FROM OrderEntity o
INNER JOIN OrderItemEntity oi ON oi.order_id = o.id
INNER JOIN CustomerEntity c ON c.id = o.customer_id
WHERE o.status = ?;

insertOrder:
INSERT INTO OrderEntity
(id, margin, cash_to_collect, product_charges, delivery_charges, order_total, customer_id, status, date_placed)
VALUES (?, ?, ?, ?, ?, ?, ?, ? ,?);


updateOrderStatus:
UPDATE OrderEntity
SET
    status = ?
WHERE id = ?;


selectLastPlacedOrder:
SELECT o.id, o.margin, o.cash_to_collect, o.product_charges, o.delivery_charges, o.order_total, o.status, o.date_placed,
oi.id AS order_item_id, oi.product_variant_id, oi.quantity,
prdvar.abbreviation AS size_abbreviation,
prd.id AS product_id, prd.name AS product_name, prd.price AS product_price,
c.id AS customer_id, c.name AS customer_name, c.address_line_1, c.address_line_2, c.city, c.phone_number, c.zip_code
FROM OrderEntity o
INNER JOIN OrderItemEntity oi ON oi.order_id = o.id
INNER JOIN ProductVariantEntity prdvar ON prdvar.id = oi.product_variant_id
INNER JOIN ProductEntity prd ON prd.id = prdvar.product_id
INNER JOIN CustomerEntity c ON c.id = o.customer_id
ORDER BY o.id DESC LIMIT 1;

selectFullOrderById:
SELECT o.id, o.margin, o.cash_to_collect, o.product_charges, o.delivery_charges, o.order_total, o.status, o.date_placed,
oi.id AS order_item_id, oi.product_variant_id, oi.quantity,
prdvar.abbreviation AS size_abbreviation,
prd.id AS product_id, prd.name AS product_name, prd.price AS product_price,
c.id AS customer_id, c.name AS customer_name, c.address_line_1, c.address_line_2, c.city, c.phone_number, c.zip_code
FROM OrderEntity o
INNER JOIN OrderItemEntity oi ON oi.order_id = o.id
INNER JOIN ProductVariantEntity prdvar ON prdvar.id = oi.product_variant_id
INNER JOIN ProductEntity prd ON prd.id = prdvar.product_id
INNER JOIN CustomerEntity c ON c.id = o.customer_id
WHERE o.id = ?;

lastOrderInsertRowId:
SELECT last_insert_rowid();

changes:
SELECT changes();
-------------------- OrderItem
insertOrderItem:
INSERT INTO OrderItemEntity
(id, order_id, product_variant_id, quantity)
VALUES (?, ?, ?, ?);


-------------------- User

selectUser:
SELECT *
FROM UserEntity
WHERE id = ?;

insertUser:
INSERT INTO UserEntity
(id, first_name, last_name, phone_number)
VALUES (?, ?, ?, ?);

deleteUser:
DELETE FROM UserEntity
WHERE id = ?;


